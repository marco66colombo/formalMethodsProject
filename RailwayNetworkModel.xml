<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
/*
    unit of measure used in the system

    distance in m
    time in minutes
    speed in km/h
*/

//time to re-submit the request to enter in the target station
int R = 1; 

//mean time that the train waits before entering into the station
int meanWaitingTime = 4;

//the number of train lines
const int NLines = 2;

//total number of stations in the whole train network
const int NStations = 6;

//maximum number of stations that a line can have
const int MaxNStations = 4;

/*
   This matrix represents the entire train network where:
        each row represents a train line (a set of consecutive stations)
        each column index represents the relative position of the stations in the line
        each element of the matrix represents a unique identifier associated with a station
    
    In order to share a station among multiple lines it is enough to put the same station identifier 
    in different train lines (rows of the matrix)

    If the line has less stations than the maximum number of stations that a line can have, 
    the remaining identifiers are negative (-1) and do not match with any real station
*/
const int railwayNetwork[NLines][MaxNStations]={{0,1,2,-1},{3,4,1,5}};

/*
    This matrix represents the distances between the (consecutive) stations of the train network
    Given a row (which represents a train line) at column index i (station at position i), 
    the element of the matrix represents the distance between station i and station i+1 (that explains why there is MaxNStations - 1)

    If the line has less stations than the maximum number of stations that a line can have, 
    the remaining identifiers are negative (-1) and do not match with any real station
*/
int distance[NLines][MaxNStations-1]={{15000,20000,-1},{17000,20000,10000}};

/*
    The elements of this vector at index i (which represents train line i) contains the number of stations of the line
    It is mostly used by the train belonging to the corresponding line not to go out of bounds of the line
*/
int length[NLines] ={3,4};


//int maxDelay[NStations - 1];

chan request[NStations];
urgent chan yes[NStations];
urgent chan no[NStations];
urgent chan leaveStation[NStations];

//the maximum time that a train can wait while trying to enter into a station
int maxAllowedWaitingTime = 5;

int kmTOmeters(int i){
    return i*1000;
}

int meters(int i){
    return i;
}

int km(int i){
    return i/1000;
}

int seconds(int i){
    return i;
}

int minutes(int i){
    return i*60;
}

int hours(int i){
    return i;
}



</declaration>
	<template>
		<name x="5" y="5">Train</name>
		<parameter>const int Cmax, const int Cdis, const int Crec, const int V, const int initialStation, const bool initialDirection, const int Wmin, const int line</parameter>
		<declaration>clock x;

clock y;

int C = Cmax*1000;  //convenzione perch√© treni in stazione tutta la notte

int W = 1; //time for charge policy


int position = initialStation;
int station = railwayNetwork[line][initialStation];


bool direction = initialDirection; //true = left-right, false = right-left
 
void addCharge(int t){ //t sarebbe delta(t) ovvero il tempo che il treno resta nella stazione

    if(C+Crec*t &lt; kmTOmeters(Cmax)){
        C = C + Crec * t;
    } else {
        C = kmTOmeters(Cmax);
    }   

}

void subCharge(int t){
    
    if(C-Cdis*t &lt; 0){
        C = 0;
    } else {
        C = C - Cdis * t;
    }

}

void updateStation(){
    
    if(position == 0){
        direction = true;
    }
    
    if(position == length[line] - 1){  //warning to index 2
        direction = false;
    }
    
    if(direction){
        position += 1;
    } else {
        position -= 1;
    }
	
	station = railwayNetwork[line][position];
}


int next(){
    
    if(position == 0)
        return 1;
    else if(position == length[line] - 1)
        return length[line] - 2;
    else if(direction)
        return position + 1;
    else 
        return position - 1;

}

int max(int V1, int V2){
    
   if(V1&gt;V2)
       return V1;
   return V2;

}

int computeDistance(int pos){

    if(direction)
        return distance[line][pos - 1];
    else 
        return distance[line][pos];

}

int computeTravelTime(){

     //return minutes(computeDistance(station)/V);
    return minutes(meters(computeDistance(position))/V)/1000 + 1; 

}

int computeRechargeTime(){

    return (meters(computeDistance(next())) - meters(C)) / Crec;

}

void updatePolicy(int station){ //updates W
    
    W = max(Wmin, computeRechargeTime()) + meanWaitingTime;

}    





</declaration>
		<location id="id0" x="-646" y="-153">
			<name x="-714" y="-144">InStation</name>
			<label kind="invariant" x="-671" y="-127">x &lt;= W</label>
		</location>
		<location id="id1" x="51" y="-153">
			<name x="17" y="-136">LeavingStation</name>
			<label kind="invariant" x="17" y="-119">x&lt;=1</label>
		</location>
		<location id="id2" x="-280" y="85">
			<name x="-314" y="43">Waiting</name>
		</location>
		<location id="id3" x="-280" y="272">
			<name x="-331" y="280">WaitingAnswer</name>
			<label kind="invariant" x="-306" y="297">x &lt;= R</label>
		</location>
		<location id="id4" x="59" y="85">
			<name x="34" y="93">DoneTravelling</name>
			<urgent/>
		</location>
		<location id="id5" x="340" y="-153">
			<name x="357" y="-161">Travelling</name>
			<label kind="invariant" x="314" y="-136">x&lt;=computeTravelTime()</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="127" y="-170">leaveStation[station]!</label>
			<label kind="assignment" x="136" y="-153">updateStation()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-136" y="85">request[station]!</label>
			<label kind="assignment" x="-119" y="68">x = 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-170" y="229">x &gt;= R</label>
			<label kind="synchronisation" x="-170" y="212">request[station]!</label>
			<label kind="assignment" x="-170" y="246">subCharge(R),
x = 0</label>
			<nail x="-110" y="179"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-357" y="153">no[station]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-552" y="-43">yes[station]?</label>
			<label kind="assignment" x="-552" y="-25">y = 0,
updatePolicy(station)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="51" y="-68">x &gt;= computeTravelTime()</label>
			<label kind="assignment" x="51" y="-51">x = 0,
subCharge(computeTravelTime())</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-348" y="-93">x &gt;= W</label>
			<label kind="assignment" x="-348" y="-153">x := 0,
y := 0,
addCharge(W)</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>int ID,const int T, const int initTrains</parameter>
		<declaration>
clock x;

//initTrains represents the number of trains at the system start
int availableTracks = T - initTrains;


void addTrain(){
    availableTracks-=1;
}

void subTrain(){
    availableTracks+=1;
}


</declaration>
		<location id="id6" x="-1156" y="-246">
			<name x="-1266" y="-246">AvailableTrack</name>
			<label kind="invariant" x="-1283" y="-221">availableTracks &gt; 0 &amp;&amp; availableTracks &lt;= T</label>
		</location>
		<location id="id7" x="-789" y="-246">
			<name x="-799" y="-280">FullTracks</name>
			<label kind="invariant" x="-816" y="-221">availableTracks==0</label>
		</location>
		<location id="id8" x="-969" y="-459">
			<name x="-979" y="-493">Initial</name>
			<label kind="invariant" x="-1020" y="-450">availableTracks&gt;=0</label>
			<urgent/>
		</location>
		<location id="id9" x="-1156" y="26">
			<name x="-1198" y="42">givingResponse</name>
			<urgent/>
		</location>
		<location id="id10" x="-790" y="18">
			<name x="-858" y="34">givingResponseFull</name>
			<urgent/>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-697" y="18">no[ID]!</label>
			<nail x="-629" y="18"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-824" y="-76">request[ID]?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-1028" y="-84">availableTracks == 1</label>
			<label kind="synchronisation" x="-994" y="-67">yes[ID]!</label>
			<label kind="assignment" x="-1011" y="-50">addTrain()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="-1334" y="-42">availableTracks &gt; 1</label>
			<label kind="synchronisation" x="-1317" y="-25">yes[ID]!</label>
			<label kind="assignment" x="-1299" y="26">addTrain()</label>
			<nail x="-1317" y="26"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1181" y="-84">request[ID]?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-994" y="-263">leaveStation[ID]?</label>
			<label kind="assignment" x="-986" y="-246">subTrain()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1308" y="-357">leaveStation[ID]?</label>
			<label kind="assignment" x="-1308" y="-340">subTrain()</label>
			<nail x="-1156" y="-340"/>
			<nail x="-1326" y="-340"/>
			<nail x="-1326" y="-246"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-918" y="-374">availableTracks==0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-1130" y="-374">availableTracks&gt;0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
/*
Train1 = Train(30, 1530, 6250, 90, 0, true, 2, 0);
Train2 = Train(30, 1530, 6250, 90, 2, false, 2, 0);
Train3 = Train(30, 1530, 6250, 90, 2, false, 2, 0);
Station1 = Station(0, 3, 1);
Station2 = Station(1, 2, 0);
Station3 = Station(2, 2, 2);
*/

Train1 = Train(32, 1530, 6250, 90, 0, true, 2, 0);
Train2 = Train(32, 1530, 6250, 90, 2, false, 2, 0);
Train3 = Train(30, 1530, 6250, 90, 0, true, 2, 1);
Train4 = Train(30, 1530, 6250, 90, 0, true, 2, 1);
Train5 = Train(30, 1530, 6250, 90, 3, false, 2, 1);

Station1 = Station(0, 1, 1);
Station2 = Station(1, 3, 0);
Station3 = Station(2, 2, 1);
Station4 = Station(3, 3, 2);
Station5 = Station(4, 2, 0);
Station6 = Station(5, 2, 1);
// List one or more processes to be composed into a system.
//system Train1, Train2, Train3, Station1, Station2, Station3;
system Train1, Train2, Train3, Train4, Train5, Station1, Station2, Station3, Station4, Station5, Station6;


//Constructor Train(): 7 arguments
//const int Cmax = Maximum Charge of the train
//const int Cdis = Negative angular coefficient of the linear dependency of the DISCHARGE [meters/minutes]
//const int Crec = Positive angular coefficient of the linear dependency of the CHARGE [meters/minutes]
//const int V = Train speed
//const int initialStation
//const bool initialDirection: true = left-right, false = right-left
//const int Wmin = Minimum stop time in the station
//const int line = index of the line which the train belongs to


//Constructor Station(): 3 arguments
//int ID = Unique identifier
//const int T = number of track in the station
//const int initTrains = initial trains in the station

</system>
	<queries>
		<query>
			<formula>A[]((Train1.Waiting imply Train1.y &lt;= Train1.computeTravelTime()+maxAllowedWaitingTime) &amp;&amp; 
	(Train2.Waiting imply Train2.y &lt;= Train2.computeTravelTime()+maxAllowedWaitingTime) &amp;&amp; 
	(Train3.Waiting imply Train3.y &lt;= Train3.computeTravelTime()+maxAllowedWaitingTime) &amp;&amp; 
	(Train4.Waiting imply Train4.y &lt;= Train4.computeTravelTime()+maxAllowedWaitingTime)  &amp;&amp; 
	(Train5.Waiting imply Train5.y &lt;= Train5.computeTravelTime()+maxAllowedWaitingTime))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Train1.C &gt; 0 &amp;&amp; Train2.C &gt; 0 &amp;&amp; Train3.C &gt; 0 &amp;&amp; Train4.C &gt; 0 &amp;&amp; Train5.C &gt; 0)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](!deadlock)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt;(Train1.WaitingAnswer || Train2.WaitingAnswer || Train3.WaitingAnswer || Train4.WaitingAnswer || Train5.WaitingAnswer)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Station2.FullTracks)</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
